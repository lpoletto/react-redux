{"version":3,"sources":["redux/pokeDucks.js","Components/Detalle.jsx","Components/Pokemones.jsx","firebase.js","redux/usuarioDucks.js","Components/Login.jsx","Components/Navbar.jsx","App.jsx","redux/store.js","index.js"],"names":["dataInicial","count","next","previous","results","unPokeDetalleAccion","url","dispatch","getState","a","localStorage","getItem","console","log","type","payload","JSON","parse","axios","get","res","nombre","data","name","ancho","weight","alto","height","foto","sprites","front_default","setItem","stringify","Detalle","useDispatch","useEffect","pokemon","useSelector","store","pokemones","unPokemon","className","src","alt","Pokemones","map","item","key","onClick","length","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","loading","activo","withRouter","props","usuario","history","push","provider","GoogleAuthProvider","signInWithPopup","uid","user","email","disabled","cerrarSesion","signOut","removeItem","to","exact","App","useState","firebaseUser","setFirebaseUser","onAuthStateChanged","RutaProtegida","component","path","rest","Login","rootReducer","combineReducers","state","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","generateStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e8a94af.chunk.js","sourcesContent":["/**\r\n * Acciones para consumir la API\r\n */\r\nimport axios from 'axios';\r\n\r\n// constantes\r\nconst dataInicial = {\r\n    count : 0,\r\n    next : null,\r\n    previous : null,\r\n    results : []\r\n}\r\n\r\n// TYPES\r\nconst OBTENER_POKEMONES_EXITO = 'OBTENER_POKEMONES_EXITO';\r\nconst SIGUIENTE_POKEMONES_EXITO = 'SIGUIENTE_POKEMONES_EXITO';\r\nconst POKE_INFO_EXITO = 'POKE_INFO_EXITO';\r\n\r\n// reducer -> acepta la lista de datos y los envia a las constantes\r\nexport default function pokeReducer(state = dataInicial, action){\r\n    switch (action.type) {\r\n        case OBTENER_POKEMONES_EXITO:\r\n            return{...state, ...action.payload};\r\n        case SIGUIENTE_POKEMONES_EXITO:\r\n            return{...state, ...action.payload};\r\n        case POKE_INFO_EXITO:\r\n            return{...state, unPokemon : action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// acciones -> consume la api\r\n\r\n/**\r\n * dispatch: activamos el reducer\r\n * getState: obtenemos la dataInicial\r\n */\r\nexport const unPokeDetalleAccion = (url = 'https://pokeapi.co/api/v2/pokemon/1/') => async (dispatch, getState) => {\r\n\r\n    if (localStorage.getItem(url)) {\r\n        console.log('datos desde el Local Storage');\r\n        dispatch({\r\n            type : POKE_INFO_EXITO,\r\n            payload : JSON.parse(localStorage.getItem(url))\r\n        })\r\n    } else {\r\n        console.log('datos desde API');\r\n        try {\r\n            const res = await axios.get(url);\r\n            //console.log(res.data);\r\n    \r\n            dispatch({\r\n                type : POKE_INFO_EXITO,\r\n                payload : {\r\n                    nombre : res.data.name,\r\n                    ancho : res.data.weight, \r\n                    alto : res.data.height,\r\n                    foto :  res.data.sprites.front_default\r\n                }\r\n            })\r\n    \r\n            //Guardamos en local storage\r\n            localStorage.setItem(url, JSON.stringify({\r\n                nombre : res.data.name,\r\n                ancho : res.data.weight, \r\n                alto : res.data.height,\r\n                foto :  res.data.sprites.front_default\r\n\r\n            }))\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const obtenerPokemonesAccion = () => async (dispatch, getState) => {\r\n    //console.log('gatState', getState().pokemones.offset); \r\n    //const offset = getState().pokemones.offset;\r\n    \r\n    // Preguntamos si es necesario hacer la peticion a la API\r\n    if (localStorage.getItem('offset=0')) {\r\n        console.log('datos desde el Local Storage');\r\n        // como ya tenemos la informacion en la data, solo hacemos el dispatch\r\n        dispatch({\r\n            type : OBTENER_POKEMONES_EXITO,\r\n            // transformamos los datos a JSON\r\n            payload :  JSON.parse(localStorage.getItem('offset=0')) // Lista de pokemones en Local Storage\r\n        })\r\n    } else {\r\n        console.log('Datos desde la API');\r\n        try {\r\n            const res = await axios.get(`https://pokeapi.co/api/v2/pokemon?offset=0&limit=10`);\r\n            //console.log(res.data);\r\n            dispatch({\r\n                type : OBTENER_POKEMONES_EXITO,\r\n                payload : res.data // Lista de pokemones\r\n            })\r\n    \r\n            // Guardamos en Local Storage en formato String\r\n            // localStorage.setItem(key, JSON.stringify( value ) );\r\n            localStorage.setItem('offset=0', JSON.stringify(res.data));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const siguientePokemonAccion = () => async (dispatch, getState) => {\r\n    /**********Primera alternativa**********\r\n    // offset siempre debe ser multimo de 20\r\n    const offset = getState().pokemones.offset;\r\n    const siguiente = offset + numero;\r\n    try {\r\n        const res = await axios.get(`https://pokeapi.co/api/v2/pokemon?offset=${siguiente}&limit=20`);\r\n        dispatch({\r\n            type : SIGUIENTE_POKEMONES_EXITO,\r\n            payload : {\r\n                array : res.data.results, // parte desde el 20\r\n                offset : siguiente\r\n            }\r\n        })\r\n    } catch (error) {\r\n        console.log(error);\r\n    }*/\r\n\r\n    // 2da Alternativa\r\n    const {next} = getState().pokemones; // destructuración\r\n    \r\n    if (localStorage.getItem(next)){\r\n        console.log('datos desde el Local Storage');\r\n\r\n        // como ya tenemos la informacion en la data, solo hacemos el dispatch\r\n        dispatch({\r\n            type : OBTENER_POKEMONES_EXITO,\r\n            // transformamos los datos a JSON\r\n            payload :  JSON.parse(localStorage.getItem(next)) // Lista de pokemones en Local Storage\r\n        })\r\n    } else {\r\n        console.log('Datos de la API');\r\n        try {\r\n            const res = await axios.get(next);\r\n            dispatch({\r\n                type : SIGUIENTE_POKEMONES_EXITO,\r\n                payload : res.data\r\n            })\r\n    \r\n            // Guardamos los datos en Local Storage\r\n            localStorage.setItem(next, JSON.stringify(res.data));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const anteriorPokemonAccion = () => async (dispatch, getState) => {\r\n    \r\n    const {previous} = getState().pokemones;\r\n\r\n    if (localStorage.getItem(previous)){\r\n        console.log('datos desde el Local Storage');\r\n\r\n        // como ya tenemos la informacion en la data, solo hacemos el dispatch\r\n        dispatch({\r\n            type : OBTENER_POKEMONES_EXITO,\r\n            // transformamos los datos a JSON\r\n            payload :  JSON.parse(localStorage.getItem(previous)) // Lista de pokemones en Local Storage\r\n        })\r\n    } else {\r\n        console.log('Datos de la API');\r\n\r\n        try {\r\n            const res = await axios.get(previous);\r\n            dispatch({\r\n                type : SIGUIENTE_POKEMONES_EXITO,\r\n                payload : res.data\r\n            })\r\n\r\n            // Guardamos los datos en Local Storage\r\n            localStorage.setItem(previous, JSON.stringify(res.data));\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {unPokeDetalleAccion} from '../redux/pokeDucks';\r\n\r\nconst Detalle = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    useEffect( ()=> {\r\n        const fetchData = () => {\r\n            dispatch(unPokeDetalleAccion())\r\n        }\r\n\r\n        fetchData()\r\n    }, [dispatch]);\r\n\r\n    const pokemon = useSelector(store => store.pokemones.unPokemon);\r\n    console.log(pokemon);\r\n    \r\n    return pokemon ? (\r\n        <div className=\"card mt-4 text-center\">\r\n            <div className=\"card-body\">\r\n                <img src={pokemon.foto} className=\"img-fluid\" alt=\"\"/>\r\n                <div className=\"card-title text-uppercase\">{pokemon.nombre}</div>\r\n                <p className=\"card-text\">Alto: {pokemon.alto} | Ancho: {pokemon.ancho}</p>\r\n            </div>\r\n        </div>\r\n    ) : null\r\n}\r\n\r\nexport default Detalle;\r\n","/**\r\n * Aquí mostraremos el listado de componentes\r\n */\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {obtenerPokemonesAccion, siguientePokemonAccion, anteriorPokemonAccion, unPokeDetalleAccion} from '../redux/pokeDucks';\r\nimport Detalle from './Detalle';\r\n\r\nconst Pokemones = () => {\r\n    const dispatch = useDispatch();\r\n    const pokemones = useSelector(store => store.pokemones.results);\r\n    const next = useSelector(store => store.pokemones.next);\r\n    const previous = useSelector(store => store.pokemones.previous);\r\n    console.log(pokemones);\r\n\r\n    return (\r\n        <div className=\"row mt-5\">\r\n            <div className=\"col-md-6\">\r\n                <h3>Lista de Pokemones</h3>\r\n                \r\n                <ul className=\"list-group mt-4\">\r\n                    {\r\n                        pokemones.map(item => (\r\n                            <li className=\"list-group-item text-uppercase\" key={item.name}>\r\n                                {item.name}\r\n                                <button \r\n                                    className=\"btn btn-warning btn-sm float-right\" \r\n                                    onClick={()=>dispatch(unPokeDetalleAccion(item.url))}\r\n                                >\r\n                                    Info\r\n                                </button>\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n\r\n                <div className=\"d-flex justify-content-between mt-4\">\r\n                    {\r\n                        pokemones.length === 0 && <button className=\"btn btn-danger\" onClick={()=>dispatch(obtenerPokemonesAccion())}> Get Pokemones </button>\r\n\r\n                    }\r\n\r\n                    {\r\n                        previous &&\r\n                        <button className=\"btn btn-danger\" onClick={()=>dispatch(anteriorPokemonAccion())}> Anterior </button>\r\n                    }\r\n\r\n                    {\r\n                        next &&\r\n                        <button className=\"btn btn-danger\" onClick={()=>dispatch(siguientePokemonAccion())}> Siguiente </button>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n                <h3>Detalle Pokemon</h3>\r\n                <Detalle/>\r\n            </div>        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pokemones;\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCaQ9EOXY1AQTEhscGhyoITH_U0EU4HAWM\",\r\n    authDomain: \"react-firebase-login-36b9e.firebaseapp.com\",\r\n    databaseURL: \"https://react-firebase-login-36b9e.firebaseio.com\",\r\n    projectId: \"react-firebase-login-36b9e\",\r\n    storageBucket: \"react-firebase-login-36b9e.appspot.com\",\r\n    messagingSenderId: \"1009251232553\",\r\n    appId: \"1:1009251232553:web:1d7eef49cbb2ff4eae2538\",\r\n    measurementId: \"G-H5JYBY7588\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst auth = firebase.auth();\r\nexport {auth, firebase};","import {auth, firebase} from '../firebase';\r\n\r\n\r\n// data incial\r\nconst dataInicial = {\r\n    loading : false, // para desactivar botones si el usuario se esta logueando\r\n    activo : false // para saber si el usuario esta activo\r\n}\r\n\r\n\r\n// types\r\nconst LOADING = 'LOADING';\r\nconst USUARIO_ERROR = 'USUARIO_ERROR';\r\nconst USUARIO_EXITO = 'USUARIO_EXITO';\r\nconst CERRAR_SESION = 'CERRAR_SESION';\r\n\r\n// reducer\r\nexport default function usuarioReducer (state = dataInicial, action) {\r\n    switch(action.type){\r\n        case LOADING:\r\n            return {...state, loading : true};\r\n        case USUARIO_ERROR:\r\n            return {...dataInicial};\r\n        case USUARIO_EXITO:\r\n            return {...state, loading : false, user : action.payload, activo: true};\r\n        case CERRAR_SESION:\r\n            return{...dataInicial};\r\n        default:\r\n            return {...state};\r\n    }\r\n}\r\n\r\n\r\n// action\r\nexport const ingresoUsuarioAccion = () => async(dispatch) => {\r\n    dispatch({\r\n        type : LOADING\r\n    })\r\n\r\n    try {\r\n        // Acceso con Google\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        const res = await auth.signInWithPopup(provider);\r\n\r\n        dispatch({\r\n            type : USUARIO_EXITO,\r\n            payload : {\r\n                uid : res.user.uid,\r\n                email : res.user.email\r\n            }\r\n        })\r\n\r\n        // Guardamos en Local Storage\r\n        localStorage.setItem('usuario',JSON.stringify({\r\n            uid : res.user.uid,\r\n            email : res.user.email\r\n        }));\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({\r\n            type : USUARIO_ERROR\r\n        })\r\n    }\r\n}\r\n\r\n// Se ejecutará cuando nosotros carguemos nuestro sitio\r\nexport const leerUsuarioActivoAccion = () => (dispatch) => {\r\n    if(localStorage.getItem('usuario')){\r\n        dispatch({\r\n            type : USUARIO_EXITO,\r\n            payload : JSON.parse(localStorage.getItem('usuario'))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const cerrarSesionAccion = () => (dispatch) => {\r\n    auth.signOut(); // Cierra sesiones de Google (firebase)\r\n\r\n    // Eliminamos el usuario del local storage\r\n    localStorage.removeItem('usuario');\r\n\r\n    dispatch({\r\n        type: CERRAR_SESION\r\n    })\r\n}","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {ingresoUsuarioAccion} from '../redux/usuarioDucks';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n\r\nconst Login = (props) => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(store => store.usuario.loading);\r\n    const activo = useSelector(store => store.usuario.activo);\r\n    //console.log(loading);\r\n    \r\n    useEffect( ()=>{\r\n        console.log(activo);\r\n        // Si es verdadero, redireccionamos a la página de inicio\r\n        if(activo){\r\n            props.history.push('/');\r\n        }\r\n    }, [activo, props.history]);\r\n    \r\n    \r\n    return (\r\n        <div className=\"mt-5 text-center\">\r\n            <h3>Ingreso con Google</h3>\r\n            <hr/>\r\n            <button \r\n                className = \"btn btn-dark\"\r\n                onClick = { ()=> dispatch(ingresoUsuarioAccion()) }\r\n                disabled = {loading}\r\n            >\r\n                Acceder\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Login)\r\n","import React from 'react'\r\nimport {Link, NavLink} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {cerrarSesionAccion} from '../redux/usuarioDucks';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n\r\nconst Navbar = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const cerrarSesion = () => {\r\n        dispatch(cerrarSesionAccion())\r\n        // una vez cerrada la sesion enviamos al usuairo al login\r\n        props.history.push('/login');\r\n    }\r\n\r\n    const activo = useSelector(store => store.usuario.activo);\r\n\r\n    return (\r\n        <div className=\"navbar navbar-dark bg-dark\">\r\n            <Link className=\"navbar-brand\" to=\"/\">APP POKE</Link>\r\n\r\n            <div className=\"d-flex\">\r\n                {\r\n                    activo ? (\r\n                        <>\r\n                            <NavLink className=\"btn btn-dark mr-2\" to=\"/\" exact>Inicio</NavLink>\r\n                            <button \r\n                                className = \"btn btn-dark mr-2\"\r\n                                onClick = { () => cerrarSesion() }\r\n                            >\r\n                                Cerrar sesión\r\n                            </button>\r\n                        </>\r\n\r\n                    ) : (\r\n                        \r\n                        <NavLink className=\"btn btn-dark mr-2\" to=\"/login\" exact>Login</NavLink>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Navbar)\r\n","import React, {useEffect, useState} from 'react';\nimport Pokemones from './Components/Pokemones';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport Login from './Components/Login';\nimport Navbar from './Components/Navbar';\nimport {auth } from './firebase';\n\n\nfunction App() {\n\n  const [firebaseUser, setFirebaseUser] = useState(false);\n\n  useEffect(() => {\n    const fetchUser = () => {\n      \n      auth.onAuthStateChanged(user => {\n          console.log(user)\n          if(user){\n              setFirebaseUser(user)\n          }else{\n              setFirebaseUser(null)\n          }\n      })\n\n    }\n\n    fetchUser();\n\n  }, [])\n\n  const RutaProtegida = ({component, path, ...rest}) => {\n    if(localStorage.getItem('usuario')) {\n      const usuarioStorage = JSON.parse(localStorage.getItem('usuario'));\n\n      // Si es igual al usuario de la bbdd\n      if(usuarioStorage.uid === firebaseUser.uid){\n        return <Route component={component} path = {path} {...rest}/>\n      } else {\n        return <Redirect to=\"/login\" {...rest} />\n      }\n\n    } else {\n      return <Redirect to=\"/login\" {...rest} />\n    }\n  }\n  // Si el usaurio existe, renderizamos sino mostramos mensaje de cargando\n  return firebaseUser !== false ? (\n      <BrowserRouter>\n        <div className=\"container mt-3\">\n          \n          <Navbar />\n          \n          <Switch>\n            <RutaProtegida component={Pokemones} path=\"/\" exact />\n            <Route component={Login} path=\"/login\" exact />\n          </Switch>\n        </div>\n      </BrowserRouter>\n  ) : (<div>Cargando...</div>)\n}\n\nexport default App;\n","/*****************TIENDA*************************\r\n * Todos los estados para que sean disponibles por nuesta app\r\n * Store lee todo lo que hay en pokeDucks\r\n * Siempre en el store hay que llamar al reducer\r\n */\r\n\r\nimport {createStore, combineReducers, compose, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport pokeReducer from './pokeDucks';\r\nimport usuarioReducer, {leerUsuarioActivoAccion} from './usuarioDucks';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    //usuarios : usuariosReducer,\r\n    pokemones : pokeReducer,\r\n    usuario : usuarioReducer \r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function generateStore(){\r\n    const store = createStore( rootReducer, composeEnhancers( applyMiddleware(thunk) ) );\r\n    // Para no perder el usuario logueado\r\n    leerUsuarioActivoAccion()(store.dispatch)\r\n    return store; \r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nimport {Provider} from 'react-redux';\nimport generateStore from './redux/store';\n\nconst store = generateStore();\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}